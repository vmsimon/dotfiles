## antidote setup
# set the name of the static .zsh_plugins.zsh file antidote will generate
zsh_plugins=${ZDOTDIR:-~}/.zsh_plugins.zsh

# ensure you have a .zsh_plugins.txt file where you can add zsh_plugins
[[ -f ${zsh_plugins:r}.txt ]] || touch ${zsh_plugins:r}.txt

# load antidote and generate static zsh_plugins.zsh file
[[ -f ${HOMEBREW_PREFIX}/share/antidote/antidote.zsh ]] && source ${HOMEBREW_PREFIX}/share/antidote/antidote.zsh
if [[ ! $zsh_plugins -nt ${zsh_plugins:r}.txt ]]; then
    echo -e "\033[0;33mInitializing ANTIDOTE and zsh plugins - please be patient ...\033[0m"
    (antidote bundle <${zsh_plugins:r}.txt >|$zsh_plugins)
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r ${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh ]]; then
  source ${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh
fi

# load antidote static zsh_plugins.zsh file
source $zsh_plugins

# Load powerlevel10k prompt
[[ -f ${ZDOTDIR:-~}/.p10k.zsh ]] && source ${ZDOTDIR:-~}/.p10k.zsh

# Check if fzf is installed ans set some sanitizer variables
if [[ -f $(brew --prefix fzf)/bin/fzf ]]; then
    export FZF_PREVIEW_ADVANCED=true
    export FZF_PATH=$(brew --prefix fzf)/bin/fzf
fi

# load fzf.zsh
[[ -f ${ZDOTDIR:-~}/.fzf.zsh ]] && source ${ZDOTDIR:-~}/.fzf.zsh

# Manually source fzf-git.sh,
# because sourcing it via plugin manager will make shell terminate
if type antidote >/dev/null 2>&1; then
  source $(__antidote_bundle_dir junegunn/fzf-git.sh)/fzf-git.sh
fi

# 1Password SSH-Agent integration
# https://developer.1password.com/docs/ssh/get-started#step-4-configure-your-ssh-or-git-client
[[ -s ${HOME}/.1password/agent.sock ]] && export SSH_AUTH_SOCK=${HOME}/.1password/agent.sock

# SDKMAN-CLI integration
# https://github.com/sdkman/homebrew-tap
# THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR=$(brew --prefix sdkman-cli)/libexec
[[ -f ${SDKMAN_DIR}/bin/sdkman-init.sh ]] &&  source ${SDKMAN_DIR}/bin/sdkman-init.sh


